/*-
 * ========================LICENSE_START=================================
 * restheart-core
 * %%
 * Copyright (C) 2014 - 2020 SoftInstigate
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * =========================LICENSE_END==================================
 */
package org.restheart;

import java.io.IOException;
import java.net.URL;
import java.time.Instant;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Andrea Di Cesare <andrea@softinstigate.com>
 */
public class Version {
    private static final Logger LOGGER = LoggerFactory.getLogger(Version.class);

    /**
     *
     * @return VersionHolder.INSTANCE
     */
    public static Version getInstance() {
        return VersionHolder.INSTANCE;
    }

    private final String version;
    private final Instant buildTime;

    private Version() {
        this.version = Version.class.getPackage().getImplementationVersion() == null
                ? null
                : Version.class.getPackage().getImplementationVersion();

        this.buildTime = extractBuildTime();
    }

    /**
     * the RESTHEart version is read from the JAR's MANIFEST.MF file, which is
     * automatically generated by the Maven build process
     *
     * @return the version of RESTHeart or null if it is not packaged
     */
    public String getVersion() {
        return version;
    }

    /**
     * the RESTHEart build time is read from the JAR's MANIFEST.MF file, which
     * is automatically generated by the Maven build process
     *
     * @return the build time defined in the MANIFEST.MF file, or now if it is
     * not packaged
     */
    public Instant getBuildTime() {
        return buildTime;
    }

    /**
     *
     * @return the build time defined in the MANIFEST.MF file, or now if not
     * present
     */
    private Instant extractBuildTime() {
        final Set<Map.Entry<Object, Object>> MANIFEST_ENTRIES = findManifestInfo();

        return MANIFEST_ENTRIES == null
                ? Instant.now()
                : MANIFEST_ENTRIES
                        .stream()
                        .filter(e -> e.getKey().toString().equals("Build-Time"))
                        .map(e -> (String) e.getValue())
                        .filter(d -> d != null)
                        .map(d -> {
                            try {
                                return Instant.parse(d);
                            } catch (Throwable t) {
                                return Instant.now();
                            }
                        })
                        .findFirst()
                        .orElse(Instant.now());
    }

    private static class VersionHolder {

        private static final Version INSTANCE = new Version();

        private VersionHolder() {
        }
    }
    
    private static Set<Map.Entry<Object, Object>> findManifestInfo() {
        Set<Map.Entry<Object, Object>> result = null;
        try {
            Enumeration<URL> resources = Thread.currentThread().getContextClassLoader()
                    .getResources("META-INF/MANIFEST.MF");
            while (resources.hasMoreElements()) {
                URL manifestUrl = resources.nextElement();
                Manifest manifest = new Manifest(manifestUrl.openStream());
                Attributes mainAttributes = manifest.getMainAttributes();
                String implementationTitle = mainAttributes.getValue("Implementation-Title");
                if (implementationTitle != null && implementationTitle.toLowerCase().startsWith("restheart")) {
                    result = mainAttributes.entrySet();
                    break;
                }
            }
        } catch (IOException e) {
            LOGGER.warn(e.getMessage());
        }
        return result;
    }
}
